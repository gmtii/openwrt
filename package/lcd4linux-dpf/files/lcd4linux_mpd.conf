# /etc/lcd4linux.conf

Display dpf {
    Driver     'DPF'
    Port       'usb0'
    Font       '12x16'
    Foreground 'ffffff'
    Background '000000'
    Basecolor  '000000'
	Orientation 3          # Orientation value from 0-3
	Backlight  backlight   # Backlight variable control
}


Plugin MPD {
    enabled 1
    server 'localhost'
    port 6600
#    password 'secret'
    minUpdateTime 500
}	    


#
# display mpd state icon: play/pause/stop
#
Widget mpd-state {
	class 'Icon'
	speed tack
	update tack
	bitmap {
        row1  '......|.*..............|................|................'
        row2  '......|.***............|.*****.....*****|.***************'
        row3  '......|.*****..........|.*****.....*****|.***************'
        row4  '......|.*******........|.*****.....*****|.***************'
        row5  '......|.*********......|.*****.....*****|.***************'
        row6  '......|.***********....|.*****.....*****|.***************'
        row7  '......|.*************..|.*****.....*****|.***************'
        row8  '......|.***************|.*****.....*****|.***************'
        row9  '......|.***************|.*****.....*****|.***************'
        row10 '......|.*************..|.*****.....*****|.***************'
        row11 '......|.***********....|.*****.....*****|.***************'
        row12 '......|.*********......|.*****.....*****|.***************'
        row13 '......|.*******........|.*****.....*****|.***************'
        row14 '......|.*****..........|.*****.....*****|.***************'
        row15 '......|.***............|.*****.....*****|.***************'
        row16 '......|.*..............|................|................'

    }
	frame (mpd::getStateInt())
	# blinking in pause state else static visible
	visible (mpd::getStateInt()==2 ? (test::onoff(0)) : '1')
}

#
# display mpd repeat icon
#
Widget mpd-repeat {
	class 'Icon'
	speed tack
	update tack
   bitmap {
        row1 '......|......'
        row2 '......|******'
        row3 '......|*....*'
        row4 '......|*..***'
        row5 '......|*...**'
        row6 '......|*....*'
        row7 '......|*.....'
        row8 '......|******'
    }
	frame (mpd::getRepeatInt())
	visible (1)
}

#
# display mpd random icon
#
Widget mpd-random {
	class 'Icon'
	speed tack
	update tack
   bitmap {
        row1 '......|......'
        row2 '......|******'
        row3 '......|.....*'
        row4 '......|*..***'
        row5 '......|**..**'
        row6 '......|***..*'
        row7 '......|*.....'
        row8 '......|******'
    }
	frame (mpd::getRandomInt())
	visible (1)
}

#
# display artist - title
#
Widget mpd-combo {
    class 'Text'
    expression mpd::artist() . '/' . mpd::title() 
    width 26
    align 'A'
    speed scroller
    update tack
}

#
# display artist
#
Widget mpd-artist {
    class 'Text'
    expression iconv('UTF-8', 'ISO-8859-1', mpd::artist()) 
    width 26
    align 'L'
    update tack
}

#
# display title
#
Widget mpd-title {
    class 'Text'
    expression iconv('UTF-8', 'ISO-8859-1', mpd::title())
    width 26
    align 'L'
    update tack
}

#
# display album
#
Widget mpd-album {
    class 'Text'
    expression iconv('UTF-8', 'ISO-8859-1', mpd::album())
    width 14
    align 'L'
    update tack
}

#
# display title date
#
Widget mpd-date {
    class 'Text'
    expression mpd::date() 
    width 4
    align 'R'
    update tack
}

#
# display position/songs in playlists
#
Widget mpd-track {
    class 'Text'
    expression ( (mpd::getMpdPlaylistGetCurrentId().'/' .mpd::getMpdPlaylistLength() )
    width 7
    align 'R'
    update tick
}

#
# display title track
#
Widget mpd-track2 {
    class 'Text'
    expression (mpd::getTrack())
    width 5
    align 'L'
    update tick
}

#
# display track position example: <00:48/04:33>
#
Widget mpd-tracktime {
    class  'Text'
    expression mpd::formatTimeMMSS( mpd::elapsedTimeSec() ).'/'.mpd::formatTimeMMSS( mpd::totalTimeSec() )
    width  11
    align  'L'
    update tick
}

#
# small playbar and track time
# 
Widget smallMP3Bar_part1 {
    class 'Bar'
    expression mpd::elapsedTimeSec()
    length 14
    min 0
    max mpd::totalTimeSec()
    direction 'E'
    style 'H'
    update tick
}

Widget smallMP3Bar_part2 {
    class  'Text'
    expression '/'.mpd::formatTimeMMSS( mpd::totalTimeSec() )
    width  6
    update tick
    align  'L'
}


#
# display volume
#
Widget mpd-vol {
    class  'Text'
    expression 'VOL:'.mpd::getVolume()
    width  7
    align  'R'
    update tick
}

#
# display volume
#
Widget mpd-vol {
    class  'Text'
    expression 'VOL:'.mpd::getVolume()
    width  7
    align  'R'
    update tick   
}

Widget mpd-bitrate {
    class  'Text'
    expression mpd::bitRate().'k'
    width  6
    update tick
    align  'L'
}

Widget mpd-cover {
    class 'Image'
	file '/tmp/'.mpd::artist().'/'.mpd::album().'_45x45.png'
    update 2000
	reload 1
    visible 1
    inverted 1
}

Layout mpd_320x240 {
    Row1 {
	Col1  'mpd-artist'
    }
    Row2 {
	Col1 'mpd-title'
    }
    Row4 {
	Col9 'mpd-album'
    }    
    Row5 {
	Col9 'mpd-track2'
	Col19 'mpd-date'
    }
    Row6 {
	Col9 'smallMP3Bar_part1'
    }
    Row7 {
	Col9 'mpd-repeat'
	Col11 'mpd-random'
	Col16 'mpd-track'
    }    
	Row8 {
		Col9 'mpd-state'
		Col12 'mpd-tracktime'
	}
	Row8 {
		Col12 'mpd-tracktime'
	}
    Layer 2 {
		X19.Y2 'mpd-cover'
    }    
}

Variables {
    t_onesec 	1000
    t_500m 	500
    tack 500
    tick 100
    tacku 100
    scroller 300
	backlight 2
	minute 60000
}


Display 'DPF'

Layout 'mpd_320x240'